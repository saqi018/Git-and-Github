
BRANCH
A branch in Git is like a separate workspace where you can try out new features, fix bugs, or experiment without affecting the main project.

Example:
Imagine youâ€™re writing a book:

The main branch is your final draft.
You create a new branch (a new copy) to test a different storyline.
If the new storyline works, you merge it into the main draft. If not, you discard it.

Commands:
git branch feature-idea - Create a branch named feature-idea.
git switch feature-idea - Switch to the feature-idea branch.

HEAD
The HEAD is a pointer that tells you which branch you are currently on. It always points to the latest commit in your active branch.

Example:
Think of HEAD as a bookmark in a book.
It shows where you are reading (working).
When you switch to another branch, the HEAD moves to that branch.

Commands:

"git log" Check the commit history for the current HEAD position.
"git switch new-branch"  Move HEAD to the new-branch.

MAIN BRANCH
The main branch (often called main) is the default branch in Git where your final or most stable version of the project lives.

Developers create other branches to work on features or fixes, and once they are done, they merge them back into the main branch.

Example:
Your main branch is like the "master recipe" for a dish.

You create separate branches (experiments) to try new spices.
Once the spice works, you merge it into the master recipe.

Commands:
"git checkout main " Switch to the main branch.
"git merge feature-idea"  Merge changes from feature-idea into main.